{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/apiservice.service\";\nimport * as i2 from \"ngx-spinner\";\nimport * as i3 from \"ngx-toastr\";\nexport class ExchangeratesComponent {\n  constructor(apiService, spinner, toastr) {\n    this.apiService = apiService;\n    this.spinner = spinner;\n    this.toastr = toastr;\n    this.exchangeRates = {};\n  }\n  ngOnInit() {\n    this.refreshRates();\n  }\n  refreshRates() {\n    this.getExchangeRate(\"USD\");\n  }\n  getExchangeRate(currencyCode) {\n    this.spinner.show();\n    this.apiService.getExchangeRate(currencyCode).subscribe({\n      next: data => {\n        if (currencyCode == \"USD\") {\n          this.exchangeRates.USD = data.rate;\n          console.log(\"USD\", data);\n          this.getExchangeRate(\"BRL\");\n        } else if (currencyCode == \"BRL\") {\n          this.exchangeRates.BRL = data.rate;\n          console.log(\"BRL\", data);\n          this.spinner.hide();\n        }\n      },\n      error: err => {\n        this.spinner.hide();\n        console.error(err);\n      },\n      complete: () => {\n        if (currencyCode == \"BRL\") this.spinner.hide();\n      }\n    });\n  }\n}\n_class = ExchangeratesComponent;\n_class.ɵfac = function ExchangeratesComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.ApiService), i0.ɵɵdirectiveInject(i2.NgxSpinnerService), i0.ɵɵdirectiveInject(i3.ToastrService));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-exchangerates\"]],\n  decls: 12,\n  vars: 3,\n  consts: [[\"bdColor\", \"rgba(0, 0, 0, 0.8)\", \"size\", \"medium\", \"color\", \"#fff\", \"type\", \"square-jelly-box\", 3, \"fullScreen\"], [2, \"color\", \"white\"], [3, \"click\"]],\n  template: function ExchangeratesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-spinner\", 0)(1, \"p\", 1);\n      i0.ɵɵtext(2, \" Loading... \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(3, \"div\")(4, \"h2\");\n      i0.ɵɵtext(5, \"Exchange Rates\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"p\");\n      i0.ɵɵtext(7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"p\");\n      i0.ɵɵtext(9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function ExchangeratesComponent_Template_button_click_10_listener() {\n        return ctx.refreshRates();\n      });\n      i0.ɵɵtext(11, \"Refresh\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"fullScreen\", true);\n      i0.ɵɵadvance(7);\n      i0.ɵɵtextInterpolate1(\"USD: \", ctx.exchangeRates.USD, \"\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\"BRL: \", ctx.exchangeRates.BRL, \"\");\n    }\n  },\n  dependencies: [i2.NgxSpinnerComponent],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["ExchangeratesComponent","constructor","apiService","spinner","toastr","exchangeRates","ngOnInit","refreshRates","getExchangeRate","currencyCode","show","subscribe","next","data","USD","rate","console","log","BRL","hide","error","err","complete","i0","ɵɵdirectiveInject","i1","ApiService","i2","NgxSpinnerService","i3","ToastrService","selectors","decls","vars","consts","template","ExchangeratesComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","ExchangeratesComponent_Template_button_click_10_listener","ɵɵproperty","ɵɵadvance","ɵɵtextInterpolate1"],"sources":["C:\\Users\\jeber\\source\\repos\\VirtualMind.Test\\Virtualmind.Test.SPA\\src\\app\\pages\\exchangerates\\exchangerates.component.ts","C:\\Users\\jeber\\source\\repos\\VirtualMind.Test\\Virtualmind.Test.SPA\\src\\app\\pages\\exchangerates\\exchangerates.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { ApiService } from 'src/app/services/apiservice.service';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { ToastrService } from 'ngx-toastr';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-exchangerates',\n  templateUrl: './exchangerates.component.html',\n  styleUrls: ['./exchangerates.component.css']\n})\nexport class ExchangeratesComponent {\n  exchangeRates: any = {};\n\n  constructor(private apiService: ApiService, private spinner: NgxSpinnerService, private toastr: ToastrService,) {}\n\n  ngOnInit(): void {\n    this.  refreshRates();\n  }\n\n  refreshRates(): void {\n    this.getExchangeRate(\"USD\");\n  }\n\n   getExchangeRate(currencyCode: string) {\n    this.spinner.show();\n    this.apiService.getExchangeRate(currencyCode).subscribe(\n      {\n        next: (data) => {\n          if (currencyCode == \"USD\") {\n            this.exchangeRates.USD = data.rate;\n            console.log(\"USD\",data);\n            this.getExchangeRate(\"BRL\");\n          }\n          else if (currencyCode == \"BRL\") {\n            this.exchangeRates.BRL = data.rate;\n            console.log(\"BRL\",data);\n            this.spinner.hide();\n          }\n        },\n        error: (err: any) => { \n          this.spinner.hide();\n          console.error(err);\n        },\n        complete: () => { \n          if (currencyCode == \"BRL\")\n            this.spinner.hide();\n        }\n      }\n    );\n  }\n\n}\n","<ngx-spinner \n  bdColor = \"rgba(0, 0, 0, 0.8)\" \n  size = \"medium\" \n  color = \"#fff\" \n  type = \"square-jelly-box\" \n  [fullScreen] = \"true\">\n  <p style=\"color: white\" > Loading... </p>\n</ngx-spinner>\n\n  <div >\n    <h2>Exchange Rates</h2>\n    <p>USD: {{ exchangeRates.USD }}</p>\n    <p>BRL: {{ exchangeRates.BRL }}</p>\n    <button (click)=\"refreshRates()\">Refresh</button>\n  </div>\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}