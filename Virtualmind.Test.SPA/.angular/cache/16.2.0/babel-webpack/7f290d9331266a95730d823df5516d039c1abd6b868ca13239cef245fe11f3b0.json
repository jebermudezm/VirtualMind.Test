{"ast":null,"code":"var _class, _class2, _class3, _class4;\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Pipe, Component, ChangeDetectionStrategy, Optional, Inject, Input, ViewChild, NgModule } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i1 from '@angular/platform-browser';\nconst _c0 = [\"overlay\"];\nfunction _class3_div_0_div_2_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\");\n  }\n}\nfunction _class3_div_0_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, _class3_div_0_div_2_div_1_Template, 1, 0, \"div\", 6);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(ctx_r2.spinner.class);\n    i0.ɵɵstyleProp(\"color\", ctx_r2.spinner.color);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.spinner.divArray);\n  }\n}\nfunction _class3_div_0_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 7);\n    i0.ɵɵpipe(1, \"safeHtml\");\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"innerHTML\", i0.ɵɵpipeBind1(1, 1, ctx_r3.template), i0.ɵɵsanitizeHtml);\n  }\n}\nfunction _class3_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1, 2);\n    i0.ɵɵtemplate(2, _class3_div_0_div_2_Template, 2, 5, \"div\", 3);\n    i0.ɵɵtemplate(3, _class3_div_0_div_3_Template, 2, 3, \"div\", 4);\n    i0.ɵɵelementStart(4, \"div\", 5);\n    i0.ɵɵprojection(5);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"background-color\", ctx_r0.spinner.bdColor)(\"z-index\", ctx_r0.spinner.zIndex)(\"position\", ctx_r0.spinner.fullScreen ? \"fixed\" : \"absolute\");\n    i0.ɵɵproperty(\"@.disabled\", ctx_r0.disableAnimation)(\"@fadeIn\", \"in\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.template);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.template);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"z-index\", ctx_r0.spinner.zIndex);\n  }\n}\nconst _c1 = [\"*\"];\nconst LOADERS = {\n  \"ball-8bits\": 16,\n  \"ball-atom\": 4,\n  \"ball-beat\": 3,\n  \"ball-circus\": 5,\n  \"ball-climbing-dot\": 4,\n  \"ball-clip-rotate\": 1,\n  \"ball-clip-rotate-multiple\": 2,\n  \"ball-clip-rotate-pulse\": 2,\n  \"ball-elastic-dots\": 5,\n  \"ball-fall\": 3,\n  \"ball-fussion\": 4,\n  \"ball-grid-beat\": 9,\n  \"ball-grid-pulse\": 9,\n  \"ball-newton-cradle\": 4,\n  \"ball-pulse\": 3,\n  \"ball-pulse-rise\": 5,\n  \"ball-pulse-sync\": 3,\n  \"ball-rotate\": 1,\n  \"ball-running-dots\": 5,\n  \"ball-scale\": 1,\n  \"ball-scale-multiple\": 3,\n  \"ball-scale-pulse\": 2,\n  \"ball-scale-ripple\": 1,\n  \"ball-scale-ripple-multiple\": 3,\n  \"ball-spin\": 8,\n  \"ball-spin-clockwise\": 8,\n  \"ball-spin-clockwise-fade\": 8,\n  \"ball-spin-clockwise-fade-rotating\": 8,\n  \"ball-spin-fade\": 8,\n  \"ball-spin-fade-rotating\": 8,\n  \"ball-spin-rotate\": 2,\n  \"ball-square-clockwise-spin\": 8,\n  \"ball-square-spin\": 8,\n  \"ball-triangle-path\": 3,\n  \"ball-zig-zag\": 2,\n  \"ball-zig-zag-deflect\": 2,\n  cog: 1,\n  \"cube-transition\": 2,\n  fire: 3,\n  \"line-scale\": 5,\n  \"line-scale-party\": 5,\n  \"line-scale-pulse-out\": 5,\n  \"line-scale-pulse-out-rapid\": 5,\n  \"line-spin-clockwise-fade\": 8,\n  \"line-spin-clockwise-fade-rotating\": 8,\n  \"line-spin-fade\": 8,\n  \"line-spin-fade-rotating\": 8,\n  pacman: 6,\n  \"square-jelly-box\": 2,\n  \"square-loader\": 1,\n  \"square-spin\": 1,\n  timer: 1,\n  \"triangle-skew-spin\": 1\n};\nconst DEFAULTS = {\n  BD_COLOR: \"rgba(51,51,51,0.8)\",\n  SPINNER_COLOR: \"#fff\",\n  Z_INDEX: 99999\n};\nconst PRIMARY_SPINNER = \"primary\";\nclass NgxSpinner {\n  constructor(init) {\n    Object.assign(this, init);\n  }\n  static create(init) {\n    if (!init?.template && !init?.type) {\n      console.warn(`[ngx-spinner]: Property \"type\" is missed. Please, provide animation type to <ngx-spinner> component\n        and ensure css is added to angular.json file`);\n    }\n    return new NgxSpinner(init);\n  }\n}\nclass NgxSpinnerService {\n  /**\n   * Creates an instance of NgxSpinnerService.\n   * @memberof NgxSpinnerService\n   */\n  constructor() {\n    /**\n     * Spinner observable\n     *\n     * @memberof NgxSpinnerService\n     */\n    // private spinnerObservable = new ReplaySubject<NgxSpinner>(1);\n    this.spinnerObservable = new BehaviorSubject(null);\n  }\n  /**\n   * Get subscription of desired spinner\n   * @memberof NgxSpinnerService\n   **/\n  getSpinner(name) {\n    return this.spinnerObservable.asObservable().pipe(filter(x => x && x.name === name));\n  }\n  /**\n   * To show spinner\n   *\n   * @memberof NgxSpinnerService\n   */\n  show(name = PRIMARY_SPINNER, spinner) {\n    return new Promise((resolve, _reject) => {\n      setTimeout(() => {\n        if (spinner && Object.keys(spinner).length) {\n          spinner[\"name\"] = name;\n          this.spinnerObservable.next(new NgxSpinner({\n            ...spinner,\n            show: true\n          }));\n          resolve(true);\n        } else {\n          this.spinnerObservable.next(new NgxSpinner({\n            name,\n            show: true\n          }));\n          resolve(true);\n        }\n      }, 10);\n    });\n  }\n  /**\n   * To hide spinner\n   *\n   * @memberof NgxSpinnerService\n   */\n  hide(name = PRIMARY_SPINNER, debounce = 10) {\n    return new Promise((resolve, _reject) => {\n      setTimeout(() => {\n        this.spinnerObservable.next(new NgxSpinner({\n          name,\n          show: false\n        }));\n        resolve(true);\n      }, debounce);\n    });\n  }\n}\n_class = NgxSpinnerService;\n_class.ɵfac = function _class_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxSpinnerService, [{\n    type: Injectable,\n    args: [{\n      providedIn: \"root\"\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\nconst NGX_SPINNER_CONFIG = new InjectionToken(\"NGX_SPINNER_CONFIG\");\nclass SafeHtmlPipe {\n  constructor(_sanitizer) {\n    this._sanitizer = _sanitizer;\n  }\n  transform(v) {\n    if (v) {\n      return this._sanitizer.bypassSecurityTrustHtml(v);\n    }\n  }\n}\n_class2 = SafeHtmlPipe;\n_class2.ɵfac = function _class2_Factory(t) {\n  return new (t || _class2)(i0.ɵɵdirectiveInject(i1.DomSanitizer, 16));\n};\n_class2.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"safeHtml\",\n  type: _class2,\n  pure: true\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SafeHtmlPipe, [{\n    type: Pipe,\n    args: [{\n      name: \"safeHtml\"\n    }]\n  }], function () {\n    return [{\n      type: i1.DomSanitizer\n    }];\n  }, null);\n})();\nclass NgxSpinnerComponent {\n  // TODO: https://github.com/Napster2210/ngx-spinner/issues/259\n  // @HostListener(\"document:keydown\", [\"$event\"])\n  // handleKeyboardEvent(event: KeyboardEvent) {\n  //   if (this.spinnerDOM && this.spinnerDOM.nativeElement) {\n  //     if (\n  //       this.fullScreen ||\n  //       (!this.fullScreen && this.isSpinnerZone(event.target))\n  //     ) {\n  //       event.returnValue = false;\n  //       event.preventDefault();\n  //     }\n  //   }\n  // }\n  /**\n   * Creates an instance of NgxSpinnerComponent.\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  constructor(spinnerService, changeDetector, elementRef, globalConfig) {\n    this.spinnerService = spinnerService;\n    this.changeDetector = changeDetector;\n    this.elementRef = elementRef;\n    this.globalConfig = globalConfig;\n    /**\n     * To enable/disable animation\n     *\n     * @type {boolean}\n     * @memberof NgxSpinnerComponent\n     */\n    this.disableAnimation = false;\n    /**\n     * Spinner Object\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    this.spinner = new NgxSpinner();\n    /**\n     * Unsubscribe from spinner's observable\n     *\n     * @memberof NgxSpinnerComponent\n     **/\n    this.ngUnsubscribe = new Subject();\n    /**\n     * To set default ngx-spinner options\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    this.setDefaultOptions = () => {\n      const {\n        type\n      } = this.globalConfig ?? {};\n      this.spinner = NgxSpinner.create({\n        name: this.name,\n        bdColor: this.bdColor,\n        size: this.size,\n        color: this.color,\n        type: this.type ?? type,\n        fullScreen: this.fullScreen,\n        divArray: this.divArray,\n        divCount: this.divCount,\n        show: this.show,\n        zIndex: this.zIndex,\n        template: this.template,\n        showSpinner: this.showSpinner\n      });\n    };\n    this.bdColor = DEFAULTS.BD_COLOR;\n    this.zIndex = DEFAULTS.Z_INDEX;\n    this.color = DEFAULTS.SPINNER_COLOR;\n    this.size = \"large\";\n    this.fullScreen = true;\n    this.name = PRIMARY_SPINNER;\n    this.template = null;\n    this.showSpinner = false;\n    this.divArray = [];\n    this.divCount = 0;\n    this.show = false;\n  }\n  initObservable() {\n    this.spinnerService.getSpinner(this.name).pipe(takeUntil(this.ngUnsubscribe)).subscribe(spinner => {\n      this.setDefaultOptions();\n      Object.assign(this.spinner, spinner);\n      if (spinner.show) {\n        this.onInputChange();\n      }\n      this.changeDetector.detectChanges();\n    });\n  }\n  /**\n   * Initialization method\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  ngOnInit() {\n    this.setDefaultOptions();\n    this.initObservable();\n  }\n  /**\n   * To check event triggers inside the Spinner Zone\n   *\n   * @param {*} element\n   * @returns {boolean}\n   * @memberof NgxSpinnerComponent\n   */\n  isSpinnerZone(element) {\n    if (element === this.elementRef.nativeElement.parentElement) {\n      return true;\n    }\n    return element.parentNode && this.isSpinnerZone(element.parentNode);\n  }\n  /**\n   * On changes event for input variables\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  ngOnChanges(changes) {\n    for (const propName in changes) {\n      if (propName) {\n        const changedProp = changes[propName];\n        if (changedProp.isFirstChange()) {\n          return;\n        } else if (typeof changedProp.currentValue !== \"undefined\" && changedProp.currentValue !== changedProp.previousValue) {\n          if (changedProp.currentValue !== \"\") {\n            this.spinner[propName] = changedProp.currentValue;\n            if (propName === \"showSpinner\") {\n              if (changedProp.currentValue) {\n                this.spinnerService.show(this.spinner.name, this.spinner);\n              } else {\n                this.spinnerService.hide(this.spinner.name);\n              }\n            }\n            if (propName === \"name\") {\n              this.initObservable();\n            }\n          }\n        }\n      }\n    }\n  }\n  /**\n   * To get class for spinner\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  getClass(type, size) {\n    this.spinner.divCount = LOADERS[type];\n    this.spinner.divArray = Array(this.spinner.divCount).fill(0).map((_, i) => i);\n    let sizeClass = \"\";\n    switch (size.toLowerCase()) {\n      case \"small\":\n        sizeClass = \"la-sm\";\n        break;\n      case \"medium\":\n        sizeClass = \"la-2x\";\n        break;\n      case \"large\":\n        sizeClass = \"la-3x\";\n        break;\n      default:\n        break;\n    }\n    return \"la-\" + type + \" \" + sizeClass;\n  }\n  /**\n   * Check if input variables have changed\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  onInputChange() {\n    this.spinner.class = this.getClass(this.spinner.type, this.spinner.size);\n  }\n  /**\n   * Component destroy event\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  ngOnDestroy() {\n    this.ngUnsubscribe.next();\n    this.ngUnsubscribe.complete();\n  }\n}\n_class3 = NgxSpinnerComponent;\n_class3.ɵfac = function _class3_Factory(t) {\n  return new (t || _class3)(i0.ɵɵdirectiveInject(NgxSpinnerService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(NGX_SPINNER_CONFIG, 8));\n};\n_class3.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: _class3,\n  selectors: [[\"ngx-spinner\"]],\n  viewQuery: function _class3_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.spinnerDOM = _t.first);\n    }\n  },\n  inputs: {\n    bdColor: \"bdColor\",\n    size: \"size\",\n    color: \"color\",\n    type: \"type\",\n    fullScreen: \"fullScreen\",\n    name: \"name\",\n    zIndex: \"zIndex\",\n    template: \"template\",\n    showSpinner: \"showSpinner\",\n    disableAnimation: \"disableAnimation\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c1,\n  decls: 1,\n  vars: 1,\n  consts: [[\"class\", \"ngx-spinner-overlay\", 3, \"background-color\", \"z-index\", \"position\", 4, \"ngIf\"], [1, \"ngx-spinner-overlay\"], [\"overlay\", \"\"], [3, \"class\", \"color\", 4, \"ngIf\"], [3, \"innerHTML\", 4, \"ngIf\"], [1, \"loading-text\"], [4, \"ngFor\", \"ngForOf\"], [3, \"innerHTML\"]],\n  template: function _class3_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵtemplate(0, _class3_div_0_Template, 6, 12, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.spinner.show);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, SafeHtmlPipe],\n  styles: [\".ngx-spinner-overlay[_ngcontent-%COMP%]{position:fixed;top:0;left:0;width:100%;height:100%}.ngx-spinner-overlay[_ngcontent-%COMP%] > div[_ngcontent-%COMP%]:not(.loading-text){top:50%;left:50%;margin:0;position:absolute;transform:translate(-50%,-50%)}.loading-text[_ngcontent-%COMP%]{position:absolute;top:60%;left:50%;transform:translate(-50%,-60%)}\"],\n  data: {\n    animation: [trigger(\"fadeIn\", [state(\"in\", style({\n      opacity: 1\n    })), transition(\":enter\", [style({\n      opacity: 0\n    }), animate(300)]), transition(\":leave\", animate(200, style({\n      opacity: 0\n    })))])]\n  },\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxSpinnerComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-spinner\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger(\"fadeIn\", [state(\"in\", style({\n        opacity: 1\n      })), transition(\":enter\", [style({\n        opacity: 0\n      }), animate(300)]), transition(\":leave\", animate(200, style({\n        opacity: 0\n      })))])],\n      template: \"<div\\n  [@.disabled]=\\\"disableAnimation\\\"\\n  [@fadeIn]=\\\"'in'\\\"\\n  *ngIf=\\\"spinner.show\\\"\\n  class=\\\"ngx-spinner-overlay\\\"\\n  [style.background-color]=\\\"spinner.bdColor\\\"\\n  [style.z-index]=\\\"spinner.zIndex\\\"\\n  [style.position]=\\\"spinner.fullScreen ? 'fixed' : 'absolute'\\\"\\n  #overlay\\n>\\n  <div *ngIf=\\\"!template\\\" [class]=\\\"spinner.class\\\" [style.color]=\\\"spinner.color\\\">\\n    <div *ngFor=\\\"let index of spinner.divArray\\\"></div>\\n  </div>\\n  <div *ngIf=\\\"template\\\" [innerHTML]=\\\"template | safeHtml\\\"></div>\\n  <div class=\\\"loading-text\\\" [style.z-index]=\\\"spinner.zIndex\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</div>\\n\",\n      styles: [\".ngx-spinner-overlay{position:fixed;top:0;left:0;width:100%;height:100%}.ngx-spinner-overlay>div:not(.loading-text){top:50%;left:50%;margin:0;position:absolute;transform:translate(-50%,-50%)}.loading-text{position:absolute;top:60%;left:50%;transform:translate(-50%,-60%)}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: NgxSpinnerService\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [NGX_SPINNER_CONFIG]\n      }]\n    }];\n  }, {\n    bdColor: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    fullScreen: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    zIndex: [{\n      type: Input\n    }],\n    template: [{\n      type: Input\n    }],\n    showSpinner: [{\n      type: Input\n    }],\n    disableAnimation: [{\n      type: Input\n    }],\n    spinnerDOM: [{\n      type: ViewChild,\n      args: [\"overlay\"]\n    }]\n  });\n})();\nclass NgxSpinnerModule {\n  static forRoot(config) {\n    return {\n      ngModule: NgxSpinnerModule,\n      providers: [{\n        provide: NGX_SPINNER_CONFIG,\n        useValue: config\n      }]\n    };\n  }\n}\n_class4 = NgxSpinnerModule;\n_class4.ɵfac = function _class4_Factory(t) {\n  return new (t || _class4)();\n};\n_class4.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: _class4\n});\n_class4.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxSpinnerModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [NgxSpinnerComponent, SafeHtmlPipe],\n      exports: [NgxSpinnerComponent]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of ngx-spinner\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DEFAULTS, LOADERS, NgxSpinner, NgxSpinnerComponent, NgxSpinnerModule, NgxSpinnerService, PRIMARY_SPINNER };","map":{"version":3,"names":["i0","Injectable","InjectionToken","Pipe","Component","ChangeDetectionStrategy","Optional","Inject","Input","ViewChild","NgModule","BehaviorSubject","Subject","filter","takeUntil","trigger","state","style","transition","animate","i2","CommonModule","i1","_c0","_class3_div_0_div_2_div_1_Template","rf","ctx","ɵɵelement","_class3_div_0_div_2_Template","ɵɵelementStart","ɵɵtemplate","ɵɵelementEnd","ctx_r2","ɵɵnextContext","ɵɵclassMap","spinner","class","ɵɵstyleProp","color","ɵɵadvance","ɵɵproperty","divArray","_class3_div_0_div_3_Template","ɵɵpipe","ctx_r3","ɵɵpipeBind1","template","ɵɵsanitizeHtml","_class3_div_0_Template","ɵɵprojection","ctx_r0","bdColor","zIndex","fullScreen","disableAnimation","_c1","LOADERS","cog","fire","pacman","timer","DEFAULTS","BD_COLOR","SPINNER_COLOR","Z_INDEX","PRIMARY_SPINNER","NgxSpinner","constructor","init","Object","assign","create","type","console","warn","NgxSpinnerService","spinnerObservable","getSpinner","name","asObservable","pipe","x","show","Promise","resolve","_reject","setTimeout","keys","length","next","hide","debounce","_class","ɵfac","_class_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","args","NGX_SPINNER_CONFIG","SafeHtmlPipe","_sanitizer","transform","v","bypassSecurityTrustHtml","_class2","_class2_Factory","ɵɵdirectiveInject","DomSanitizer","ɵpipe","ɵɵdefinePipe","pure","NgxSpinnerComponent","spinnerService","changeDetector","elementRef","globalConfig","ngUnsubscribe","setDefaultOptions","size","divCount","showSpinner","initObservable","subscribe","onInputChange","detectChanges","ngOnInit","isSpinnerZone","element","nativeElement","parentElement","parentNode","ngOnChanges","changes","propName","changedProp","isFirstChange","currentValue","previousValue","getClass","Array","fill","map","_","i","sizeClass","toLowerCase","ngOnDestroy","complete","_class3","_class3_Factory","ChangeDetectorRef","ElementRef","ɵcmp","ɵɵdefineComponent","selectors","viewQuery","_class3_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","spinnerDOM","first","inputs","features","ɵɵNgOnChangesFeature","ngContentSelectors","decls","vars","consts","_class3_Template","ɵɵprojectionDef","dependencies","NgForOf","NgIf","styles","data","animation","opacity","changeDetection","selector","OnPush","animations","undefined","decorators","NgxSpinnerModule","forRoot","config","ngModule","providers","provide","useValue","_class4","_class4_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports"],"sources":["C:/Users/jeber/source/repos/VirtualMind.Test/Virtualmind.Test.SPA/node_modules/ngx-spinner/fesm2022/ngx-spinner.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Pipe, Component, ChangeDetectionStrategy, Optional, Inject, Input, ViewChild, NgModule } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i1 from '@angular/platform-browser';\n\nconst LOADERS = {\n    \"ball-8bits\": 16,\n    \"ball-atom\": 4,\n    \"ball-beat\": 3,\n    \"ball-circus\": 5,\n    \"ball-climbing-dot\": 4,\n    \"ball-clip-rotate\": 1,\n    \"ball-clip-rotate-multiple\": 2,\n    \"ball-clip-rotate-pulse\": 2,\n    \"ball-elastic-dots\": 5,\n    \"ball-fall\": 3,\n    \"ball-fussion\": 4,\n    \"ball-grid-beat\": 9,\n    \"ball-grid-pulse\": 9,\n    \"ball-newton-cradle\": 4,\n    \"ball-pulse\": 3,\n    \"ball-pulse-rise\": 5,\n    \"ball-pulse-sync\": 3,\n    \"ball-rotate\": 1,\n    \"ball-running-dots\": 5,\n    \"ball-scale\": 1,\n    \"ball-scale-multiple\": 3,\n    \"ball-scale-pulse\": 2,\n    \"ball-scale-ripple\": 1,\n    \"ball-scale-ripple-multiple\": 3,\n    \"ball-spin\": 8,\n    \"ball-spin-clockwise\": 8,\n    \"ball-spin-clockwise-fade\": 8,\n    \"ball-spin-clockwise-fade-rotating\": 8,\n    \"ball-spin-fade\": 8,\n    \"ball-spin-fade-rotating\": 8,\n    \"ball-spin-rotate\": 2,\n    \"ball-square-clockwise-spin\": 8,\n    \"ball-square-spin\": 8,\n    \"ball-triangle-path\": 3,\n    \"ball-zig-zag\": 2,\n    \"ball-zig-zag-deflect\": 2,\n    cog: 1,\n    \"cube-transition\": 2,\n    fire: 3,\n    \"line-scale\": 5,\n    \"line-scale-party\": 5,\n    \"line-scale-pulse-out\": 5,\n    \"line-scale-pulse-out-rapid\": 5,\n    \"line-spin-clockwise-fade\": 8,\n    \"line-spin-clockwise-fade-rotating\": 8,\n    \"line-spin-fade\": 8,\n    \"line-spin-fade-rotating\": 8,\n    pacman: 6,\n    \"square-jelly-box\": 2,\n    \"square-loader\": 1,\n    \"square-spin\": 1,\n    timer: 1,\n    \"triangle-skew-spin\": 1,\n};\nconst DEFAULTS = {\n    BD_COLOR: \"rgba(51,51,51,0.8)\",\n    SPINNER_COLOR: \"#fff\",\n    Z_INDEX: 99999,\n};\nconst PRIMARY_SPINNER = \"primary\";\nclass NgxSpinner {\n    constructor(init) {\n        Object.assign(this, init);\n    }\n    static create(init) {\n        if (!init?.template && !init?.type) {\n            console.warn(`[ngx-spinner]: Property \"type\" is missed. Please, provide animation type to <ngx-spinner> component\n        and ensure css is added to angular.json file`);\n        }\n        return new NgxSpinner(init);\n    }\n}\n\nclass NgxSpinnerService {\n    /**\n     * Creates an instance of NgxSpinnerService.\n     * @memberof NgxSpinnerService\n     */\n    constructor() {\n        /**\n         * Spinner observable\n         *\n         * @memberof NgxSpinnerService\n         */\n        // private spinnerObservable = new ReplaySubject<NgxSpinner>(1);\n        this.spinnerObservable = new BehaviorSubject(null);\n    }\n    /**\n     * Get subscription of desired spinner\n     * @memberof NgxSpinnerService\n     **/\n    getSpinner(name) {\n        return this.spinnerObservable\n            .asObservable()\n            .pipe(filter((x) => x && x.name === name));\n    }\n    /**\n     * To show spinner\n     *\n     * @memberof NgxSpinnerService\n     */\n    show(name = PRIMARY_SPINNER, spinner) {\n        return new Promise((resolve, _reject) => {\n            setTimeout(() => {\n                if (spinner && Object.keys(spinner).length) {\n                    spinner[\"name\"] = name;\n                    this.spinnerObservable.next(new NgxSpinner({ ...spinner, show: true }));\n                    resolve(true);\n                }\n                else {\n                    this.spinnerObservable.next(new NgxSpinner({ name, show: true }));\n                    resolve(true);\n                }\n            }, 10);\n        });\n    }\n    /**\n     * To hide spinner\n     *\n     * @memberof NgxSpinnerService\n     */\n    hide(name = PRIMARY_SPINNER, debounce = 10) {\n        return new Promise((resolve, _reject) => {\n            setTimeout(() => {\n                this.spinnerObservable.next(new NgxSpinner({ name, show: false }));\n                resolve(true);\n            }, debounce);\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: NgxSpinnerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: NgxSpinnerService, providedIn: \"root\" }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: NgxSpinnerService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: \"root\",\n                }]\n        }], ctorParameters: function () { return []; } });\n\nconst NGX_SPINNER_CONFIG = new InjectionToken(\"NGX_SPINNER_CONFIG\");\n\nclass SafeHtmlPipe {\n    constructor(_sanitizer) {\n        this._sanitizer = _sanitizer;\n    }\n    transform(v) {\n        if (v) {\n            return this._sanitizer.bypassSecurityTrustHtml(v);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: SafeHtmlPipe, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Pipe }); }\n    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: SafeHtmlPipe, name: \"safeHtml\" }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: SafeHtmlPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: \"safeHtml\",\n                }]\n        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }]; } });\n\nclass NgxSpinnerComponent {\n    // TODO: https://github.com/Napster2210/ngx-spinner/issues/259\n    // @HostListener(\"document:keydown\", [\"$event\"])\n    // handleKeyboardEvent(event: KeyboardEvent) {\n    //   if (this.spinnerDOM && this.spinnerDOM.nativeElement) {\n    //     if (\n    //       this.fullScreen ||\n    //       (!this.fullScreen && this.isSpinnerZone(event.target))\n    //     ) {\n    //       event.returnValue = false;\n    //       event.preventDefault();\n    //     }\n    //   }\n    // }\n    /**\n     * Creates an instance of NgxSpinnerComponent.\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    constructor(spinnerService, changeDetector, elementRef, globalConfig) {\n        this.spinnerService = spinnerService;\n        this.changeDetector = changeDetector;\n        this.elementRef = elementRef;\n        this.globalConfig = globalConfig;\n        /**\n         * To enable/disable animation\n         *\n         * @type {boolean}\n         * @memberof NgxSpinnerComponent\n         */\n        this.disableAnimation = false;\n        /**\n         * Spinner Object\n         *\n         * @memberof NgxSpinnerComponent\n         */\n        this.spinner = new NgxSpinner();\n        /**\n         * Unsubscribe from spinner's observable\n         *\n         * @memberof NgxSpinnerComponent\n         **/\n        this.ngUnsubscribe = new Subject();\n        /**\n         * To set default ngx-spinner options\n         *\n         * @memberof NgxSpinnerComponent\n         */\n        this.setDefaultOptions = () => {\n            const { type } = this.globalConfig ?? {};\n            this.spinner = NgxSpinner.create({\n                name: this.name,\n                bdColor: this.bdColor,\n                size: this.size,\n                color: this.color,\n                type: this.type ?? type,\n                fullScreen: this.fullScreen,\n                divArray: this.divArray,\n                divCount: this.divCount,\n                show: this.show,\n                zIndex: this.zIndex,\n                template: this.template,\n                showSpinner: this.showSpinner,\n            });\n        };\n        this.bdColor = DEFAULTS.BD_COLOR;\n        this.zIndex = DEFAULTS.Z_INDEX;\n        this.color = DEFAULTS.SPINNER_COLOR;\n        this.size = \"large\";\n        this.fullScreen = true;\n        this.name = PRIMARY_SPINNER;\n        this.template = null;\n        this.showSpinner = false;\n        this.divArray = [];\n        this.divCount = 0;\n        this.show = false;\n    }\n    initObservable() {\n        this.spinnerService\n            .getSpinner(this.name)\n            .pipe(takeUntil(this.ngUnsubscribe))\n            .subscribe((spinner) => {\n            this.setDefaultOptions();\n            Object.assign(this.spinner, spinner);\n            if (spinner.show) {\n                this.onInputChange();\n            }\n            this.changeDetector.detectChanges();\n        });\n    }\n    /**\n     * Initialization method\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    ngOnInit() {\n        this.setDefaultOptions();\n        this.initObservable();\n    }\n    /**\n     * To check event triggers inside the Spinner Zone\n     *\n     * @param {*} element\n     * @returns {boolean}\n     * @memberof NgxSpinnerComponent\n     */\n    isSpinnerZone(element) {\n        if (element === this.elementRef.nativeElement.parentElement) {\n            return true;\n        }\n        return element.parentNode && this.isSpinnerZone(element.parentNode);\n    }\n    /**\n     * On changes event for input variables\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    ngOnChanges(changes) {\n        for (const propName in changes) {\n            if (propName) {\n                const changedProp = changes[propName];\n                if (changedProp.isFirstChange()) {\n                    return;\n                }\n                else if (typeof changedProp.currentValue !== \"undefined\" &&\n                    changedProp.currentValue !== changedProp.previousValue) {\n                    if (changedProp.currentValue !== \"\") {\n                        this.spinner[propName] = changedProp.currentValue;\n                        if (propName === \"showSpinner\") {\n                            if (changedProp.currentValue) {\n                                this.spinnerService.show(this.spinner.name, this.spinner);\n                            }\n                            else {\n                                this.spinnerService.hide(this.spinner.name);\n                            }\n                        }\n                        if (propName === \"name\") {\n                            this.initObservable();\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * To get class for spinner\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    getClass(type, size) {\n        this.spinner.divCount = LOADERS[type];\n        this.spinner.divArray = Array(this.spinner.divCount)\n            .fill(0)\n            .map((_, i) => i);\n        let sizeClass = \"\";\n        switch (size.toLowerCase()) {\n            case \"small\":\n                sizeClass = \"la-sm\";\n                break;\n            case \"medium\":\n                sizeClass = \"la-2x\";\n                break;\n            case \"large\":\n                sizeClass = \"la-3x\";\n                break;\n            default:\n                break;\n        }\n        return \"la-\" + type + \" \" + sizeClass;\n    }\n    /**\n     * Check if input variables have changed\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    onInputChange() {\n        this.spinner.class = this.getClass(this.spinner.type, this.spinner.size);\n    }\n    /**\n     * Component destroy event\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    ngOnDestroy() {\n        this.ngUnsubscribe.next();\n        this.ngUnsubscribe.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: NgxSpinnerComponent, deps: [{ token: NgxSpinnerService }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: NGX_SPINNER_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: NgxSpinnerComponent, selector: \"ngx-spinner\", inputs: { bdColor: \"bdColor\", size: \"size\", color: \"color\", type: \"type\", fullScreen: \"fullScreen\", name: \"name\", zIndex: \"zIndex\", template: \"template\", showSpinner: \"showSpinner\", disableAnimation: \"disableAnimation\" }, viewQueries: [{ propertyName: \"spinnerDOM\", first: true, predicate: [\"overlay\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: \"<div\\n  [@.disabled]=\\\"disableAnimation\\\"\\n  [@fadeIn]=\\\"'in'\\\"\\n  *ngIf=\\\"spinner.show\\\"\\n  class=\\\"ngx-spinner-overlay\\\"\\n  [style.background-color]=\\\"spinner.bdColor\\\"\\n  [style.z-index]=\\\"spinner.zIndex\\\"\\n  [style.position]=\\\"spinner.fullScreen ? 'fixed' : 'absolute'\\\"\\n  #overlay\\n>\\n  <div *ngIf=\\\"!template\\\" [class]=\\\"spinner.class\\\" [style.color]=\\\"spinner.color\\\">\\n    <div *ngFor=\\\"let index of spinner.divArray\\\"></div>\\n  </div>\\n  <div *ngIf=\\\"template\\\" [innerHTML]=\\\"template | safeHtml\\\"></div>\\n  <div class=\\\"loading-text\\\" [style.z-index]=\\\"spinner.zIndex\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</div>\\n\", styles: [\".ngx-spinner-overlay{position:fixed;top:0;left:0;width:100%;height:100%}.ngx-spinner-overlay>div:not(.loading-text){top:50%;left:50%;margin:0;position:absolute;transform:translate(-50%,-50%)}.loading-text{position:absolute;top:60%;left:50%;transform:translate(-50%,-60%)}\\n\"], dependencies: [{ kind: \"directive\", type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"pipe\", type: SafeHtmlPipe, name: \"safeHtml\" }], animations: [\n            trigger(\"fadeIn\", [\n                state(\"in\", style({ opacity: 1 })),\n                transition(\":enter\", [style({ opacity: 0 }), animate(300)]),\n                transition(\":leave\", animate(200, style({ opacity: 0 }))),\n            ]),\n        ], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: NgxSpinnerComponent, decorators: [{\n            type: Component,\n            args: [{ selector: \"ngx-spinner\", changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger(\"fadeIn\", [\n                            state(\"in\", style({ opacity: 1 })),\n                            transition(\":enter\", [style({ opacity: 0 }), animate(300)]),\n                            transition(\":leave\", animate(200, style({ opacity: 0 }))),\n                        ]),\n                    ], template: \"<div\\n  [@.disabled]=\\\"disableAnimation\\\"\\n  [@fadeIn]=\\\"'in'\\\"\\n  *ngIf=\\\"spinner.show\\\"\\n  class=\\\"ngx-spinner-overlay\\\"\\n  [style.background-color]=\\\"spinner.bdColor\\\"\\n  [style.z-index]=\\\"spinner.zIndex\\\"\\n  [style.position]=\\\"spinner.fullScreen ? 'fixed' : 'absolute'\\\"\\n  #overlay\\n>\\n  <div *ngIf=\\\"!template\\\" [class]=\\\"spinner.class\\\" [style.color]=\\\"spinner.color\\\">\\n    <div *ngFor=\\\"let index of spinner.divArray\\\"></div>\\n  </div>\\n  <div *ngIf=\\\"template\\\" [innerHTML]=\\\"template | safeHtml\\\"></div>\\n  <div class=\\\"loading-text\\\" [style.z-index]=\\\"spinner.zIndex\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</div>\\n\", styles: [\".ngx-spinner-overlay{position:fixed;top:0;left:0;width:100%;height:100%}.ngx-spinner-overlay>div:not(.loading-text){top:50%;left:50%;margin:0;position:absolute;transform:translate(-50%,-50%)}.loading-text{position:absolute;top:60%;left:50%;transform:translate(-50%,-60%)}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: NgxSpinnerService }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [NGX_SPINNER_CONFIG]\n                }] }]; }, propDecorators: { bdColor: [{\n                type: Input\n            }], size: [{\n                type: Input\n            }], color: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], fullScreen: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], zIndex: [{\n                type: Input\n            }], template: [{\n                type: Input\n            }], showSpinner: [{\n                type: Input\n            }], disableAnimation: [{\n                type: Input\n            }], spinnerDOM: [{\n                type: ViewChild,\n                args: [\"overlay\"]\n            }] } });\n\nclass NgxSpinnerModule {\n    static forRoot(config) {\n        return {\n            ngModule: NgxSpinnerModule,\n            providers: [{ provide: NGX_SPINNER_CONFIG, useValue: config }],\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: NgxSpinnerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: NgxSpinnerModule, declarations: [NgxSpinnerComponent, SafeHtmlPipe], imports: [CommonModule], exports: [NgxSpinnerComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: NgxSpinnerModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: NgxSpinnerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [NgxSpinnerComponent, SafeHtmlPipe],\n                    exports: [NgxSpinnerComponent],\n                }]\n        }] });\n\n/*\n * Public API Surface of ngx-spinner\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DEFAULTS, LOADERS, NgxSpinner, NgxSpinnerComponent, NgxSpinnerModule, NgxSpinnerService, PRIMARY_SPINNER };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}